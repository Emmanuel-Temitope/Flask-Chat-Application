from flask import (Flask, render_template, url_for,
                   redirect, session)
import os
from flask_session import Session
from models import db
from forms import SignUpForm


# returns flask application objects
def create_app(test_config=None):
    """ application's factory """
    app = Flask(__name__)

    # secret key autogenerated
    SECRET_KEY = os.urandom(32)

    app.config.from_mapping(
        SESSION_PERMANENT=False,
        SESSION_TYPE="filesystem",
        SQLALCHEMY_DATABASE_URI=os.getenv('DATABASE_URL'),
        SQLALCHEMY_TRACK_MODIFICATIONS=False,
        SECRET_KEY=SECRET_KEY,
    )

    if test_config is None:
        # load the app config from file if not testing
        app.config.from_pyfile("config.py", silent=True)
    else:
        # if testing load app config on tests config
        app.config.from_mapping(test_config)

    @app.route('/<path:urlpath>/')
    @app.route('/', methods=['POST', 'GET'])
    # @logout_required
    def index(urlpath='/'):
        """ homepage for all non-registered users """
        # if user not in session, form pop's up
        if session.get('user'):
            return redirect(url_for('chat.index'))
        form = SignUpForm()
        return render_template('main/home.html', form=form)

    from auth import auth
    app.register_blueprint(auth, url_prefix='/auth/')

    from chat import chat
    app.register_blueprint(chat, url_prefix='/chat/')

    # initializes app and configures sessions
    db.init_app(app)
    Session(app)

    return app


# initializes db on cli call
def main():
    """ initialize db """
    print("Initializing db")
    db.create_all()
    print("DB initalized successfully!")


if __name__ == "__main__":
    create_app().app_context().push()
    # initializes db on cli call
    main()

# TODO: start working on the chat engine
